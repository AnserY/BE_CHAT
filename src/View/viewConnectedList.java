/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.PresenteServerControler;
import Controller.listContactController;
import Message.DataAgent;
import Model.Model;
import Network.Observer;
import Network.TCPServer;
import Network.UDPReceiver;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.InetAddress;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 *
 * @author root
 */
public class viewConnectedList extends javax.swing.JFrame implements Observer {

    private Model mo;
    private TCPServer tcpserver;
    private PresenteServerControler ps = new PresenteServerControler();
    private boolean mode;
    private String pseudo;
    private InetAddress ip;
    private listContactController LC = new listContactController();

    /**
     * Creates new form viewConnectedList
     */
    public viewConnectedList() {
        addListener();
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewConnectedList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewConnectedList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewConnectedList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewConnectedList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewConnectedList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Object o) {
        System.err.println("oui");
             this.jPanel1.removeAll();
        if (o instanceof UDPReceiver) {
            setLayout(new java.awt.GridLayout(0, 1));
            for (int i = 0; i < ((UDPReceiver) o).CC.me.connectedList.size(); ++i) {
                if (!((UDPReceiver) o).CC.me.connectedList.get(i).pseudo.equals(((UDPReceiver) o).CC.me.pseudo)) {
                    JButton b = new JButton(((UDPReceiver) o).CC.me.connectedList.get(i).pseudo);

                    doIt(b, i, o);

                    add(b);
                    pack();
                }
            }

        }
    }

    private void doIt(JButton b, int i, Object o) {
        b.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                viewConversationChat view = new viewConversationChat();

                try {
                    String ipDest = ((UDPReceiver) o).CC.me.connectedList.get(i).myIp.toString();
                    tcpserver.setView(view);
                    view.setData(((UDPReceiver) o).CC.me.connectedList.get(i), tcpserver, mo, mo.getStringConv(ipDest), ((UDPReceiver) o).CC.me.pseudo);
                } catch (IOException ex) {
                    Logger.getLogger(viewConnectedList.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(viewConnectedList.class.getName()).log(Level.SEVERE, null, ex);
                }
                view.setVisible(true);
            }
        });
    }

    
    
     public void setData(TCPServer TCPServer, Model model, boolean mode) {
        this.tcpserver = TCPServer;
        this.mo = model;
        this.mode = mode;
    }
     
    public void setAgent(String pseudo, InetAddress myIp) {
        this.pseudo = pseudo;
        this.ip = myIp;
    }
    
    private void addListener() {
        this.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
           if (mode) {
                        LC.sendgoodbye();
                    } else {
               try {
                   ps.deco(pseudo, ip.toString().replaceAll("/", ""));
               } catch (IOException ex) {
                   Logger.getLogger(viewConnectedList.class.getName()).log(Level.SEVERE, null, ex);
               }
               }
        }
        });
    }
}
